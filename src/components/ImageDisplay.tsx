import React, { useEffect, useState } from 'react';
import { Download, Maximize, X } from 'lucide-react';
import ReactDOM from 'react-dom';

interface ImageDisplayProps {
  imageUrl: string;
  handleDownloadImage: () => void;
  showFullScreen: boolean;
  setShowFullScreen: (show: boolean) => void;
  setError: (error: string) => void;
}

const ImageDisplay: React.FC<ImageDisplayProps> = ({
  imageUrl,
  handleDownloadImage,
  showFullScreen,
  setShowFullScreen,
  setError
}) => {
  const [portalContainer, setPortalContainer] = useState<HTMLElement | null>(null);

  useEffect(() => {
    // Ensure document.body is accessed only on the client side
    setPortalContainer(document.body);
  }, []);

  return (
    <div className="mt-8 text-center animate-fadeIn">
      <h2 className="text-xl font-semibold text-gray-800 dark:text-white mb-6 flex items-center justify-center">
        <span className="bg-gradient-to-r from-indigo-500 to-purple-500 h-1 w-12 rounded mr-3"></span>
        Generated Image
        <span className="bg-gradient-to-r from-purple-500 to-indigo-500 h-1 w-12 rounded ml-3"></span>
      </h2>
      <div className="relative inline-block">
        <img
          src={imageUrl}
          alt="Generated by AI"
          className="max-w-full h-auto rounded-xl shadow-xl border border-gray-200 dark:border-gray-700 mx-auto transition-all duration-500 hover:shadow-2xl transform hover:scale-[1.01]"
          onError={(e) => { 
            e.currentTarget.src = 'https://placehold.co/400x300/cccccc/ffffff?text=Image+Load+Error'; 
            setError('Failed to load image. It might be corrupted or invalid.'); 
          }}
        />
        <div className="absolute bottom-4 right-4 flex gap-2">
          <button
            onClick={handleDownloadImage}
            className="p-2 rounded-full bg-blue-500 text-white shadow-md hover:bg-blue-600 hover:scale-110 transform transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-400"
            aria-label="Download image"
          >
            <Download size={18} />
          </button>
          <button
            onClick={() => setShowFullScreen(true)}
            className="p-2 rounded-full bg-gray-600 text-white shadow-md hover:bg-gray-700 hover:scale-110 transform transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-gray-500"
            aria-label="View full screen"
          >
            <Maximize size={18} />
          </button>
        </div>
      </div>
      
      {/* Fullscreen modal */}
      {showFullScreen && portalContainer && ReactDOM.createPortal(
        (
          <div
            className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-90 p-4 animate-fadeIn"
            onClick={() => setShowFullScreen(false)} // Click on backdrop closes modal
          >
            <div 
              className="relative max-w-full max-h-full flex items-center justify-center"
              onClick={(e) => e.stopPropagation()} // Prevent backdrop click when clicking on image container
            >
              <img
                src={imageUrl}
                alt="Full Screen Generated Image"
                className="max-w-full max-h-full object-contain rounded-lg shadow-2xl animate-scaleIn"
              />
              <button
                onClick={() => setShowFullScreen(false)} // Explicit close button
                className="absolute top-4 right-4 p-2 rounded-full bg-white dark:bg-gray-700 text-gray-800 dark:text-white shadow-lg hover:scale-110 transform transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500"
                aria-label="Close full screen"
              >
                <X size={20} />
              </button>
            </div>
          </div>
        ),
        portalContainer
      )}
    </div>
  );
};

export default ImageDisplay;